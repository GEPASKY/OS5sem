/*Вариант 1

Напишите программу, которая создает два подпроцесса, а они, в свою очередь, – свой
подпроцесс. После каждого вызова fork каждый родительский процесс должен использовать
функцию writeln для вывода идентификаторов своих дочерних процессов.*/


#include <stdio.h>  // Для printf
#include <unistd.h>  // Для fork(), getpid(), getppid()
#include <sys/types.h>  // Для типов данных, таких как pid_t
#include <sys/wait.h>  // Для wait()

int main() {
    printf("Родительский процесс PID: %i\n", getpid());

    // Первый вызов fork() - создаем первый дочерний процесс
    pid_t pid1 = fork();

    if (pid1 < 0) {
        // Если fork вернул -1, значит произошла ошибка
        perror("Ошибка fork");
        return 1;
    } else if (pid1 == 0) {
        // Код первого дочернего процесса
        printf("Первый дочерний процесс: PID: %i, PPID: %i\n", getpid(),  getppid());

        // Первый дочерний процесс создает своего подпроцесса
        pid_t subpid1 = fork();

        if (subpid1 < 0) {
            perror("Ошибка fork");
            return 1;
        } else if (subpid1 == 0) {
            // Код подпроцесса первого дочернего
            printf("Подпроцесс первого дочернего: PID: %i, PPID: %i\n", getpid(),  getppid());
        } else {
            // Первый дочерний процесс ждет завершения подпроцесса
            wait(NULL);
        }

    } else {
        // Родительский процесс продолжает выполнение

        // Второй вызов fork() - создаем второй дочерний процесс
        pid_t pid2 = fork();

        if (pid2 < 0) {
            perror("Ошибка fork");
            return 1;
        } else if (pid2 == 0) {
            // Код второго дочернего процесса
            printf("Второй дочерний процесс: PID: %i, PPID: %i\n", getpid(),  getppid());

            // Второй дочерний процесс создает своего подпроцесса
            pid_t subpid2 = fork();

            if (subpid2 < 0) {
                perror("Ошибка fork");
                return 1;
            } else if (subpid2 == 0) {
                // Код подпроцесса второго дочернего
                printf("Подпроцесс второго дочернего: PID: %i, PPID: %i\n", getpid(),  getppid());
            } else {
                // Второй дочерний процесс ждет завершения подпроцесса
                wait(NULL);
            }
        } else {
            // Родительский процесс ждет завершения двух дочерних процессов
            wait(NULL);  // Ожидание завершения первого дочернего
            wait(NULL);  // Ожидание завершения второго дочернего
        }
    }

    return 0;
}
